/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TicketBookingService } from "../ticketBooking.service";
import { TicketBookingCreateInput } from "./TicketBookingCreateInput";
import { TicketBooking } from "./TicketBooking";
import { TicketBookingFindManyArgs } from "./TicketBookingFindManyArgs";
import { TicketBookingWhereUniqueInput } from "./TicketBookingWhereUniqueInput";
import { TicketBookingUpdateInput } from "./TicketBookingUpdateInput";

export class TicketBookingControllerBase {
  constructor(protected readonly service: TicketBookingService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TicketBooking })
  async createTicketBooking(
    @common.Body() data: TicketBookingCreateInput
  ): Promise<TicketBooking> {
    return await this.service.createTicketBooking({
      data: data,
      select: {
        createdAt: true,
        eventDate: true,
        id: true,
        paymentStatus: true,
        timeSlot: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TicketBooking] })
  @ApiNestedQuery(TicketBookingFindManyArgs)
  async ticketBookings(
    @common.Req() request: Request
  ): Promise<TicketBooking[]> {
    const args = plainToClass(TicketBookingFindManyArgs, request.query);
    return this.service.ticketBookings({
      ...args,
      select: {
        createdAt: true,
        eventDate: true,
        id: true,
        paymentStatus: true,
        timeSlot: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TicketBooking })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async ticketBooking(
    @common.Param() params: TicketBookingWhereUniqueInput
  ): Promise<TicketBooking | null> {
    const result = await this.service.ticketBooking({
      where: params,
      select: {
        createdAt: true,
        eventDate: true,
        id: true,
        paymentStatus: true,
        timeSlot: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TicketBooking })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTicketBooking(
    @common.Param() params: TicketBookingWhereUniqueInput,
    @common.Body() data: TicketBookingUpdateInput
  ): Promise<TicketBooking | null> {
    try {
      return await this.service.updateTicketBooking({
        where: params,
        data: data,
        select: {
          createdAt: true,
          eventDate: true,
          id: true,
          paymentStatus: true,
          timeSlot: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TicketBooking })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTicketBooking(
    @common.Param() params: TicketBookingWhereUniqueInput
  ): Promise<TicketBooking | null> {
    try {
      return await this.service.deleteTicketBooking({
        where: params,
        select: {
          createdAt: true,
          eventDate: true,
          id: true,
          paymentStatus: true,
          timeSlot: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
