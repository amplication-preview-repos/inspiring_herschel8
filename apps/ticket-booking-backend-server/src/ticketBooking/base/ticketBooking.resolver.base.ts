/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { TicketBooking } from "./TicketBooking";
import { TicketBookingCountArgs } from "./TicketBookingCountArgs";
import { TicketBookingFindManyArgs } from "./TicketBookingFindManyArgs";
import { TicketBookingFindUniqueArgs } from "./TicketBookingFindUniqueArgs";
import { CreateTicketBookingArgs } from "./CreateTicketBookingArgs";
import { UpdateTicketBookingArgs } from "./UpdateTicketBookingArgs";
import { DeleteTicketBookingArgs } from "./DeleteTicketBookingArgs";
import { TicketBookingService } from "../ticketBooking.service";
@graphql.Resolver(() => TicketBooking)
export class TicketBookingResolverBase {
  constructor(protected readonly service: TicketBookingService) {}

  async _ticketBookingsMeta(
    @graphql.Args() args: TicketBookingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TicketBooking])
  async ticketBookings(
    @graphql.Args() args: TicketBookingFindManyArgs
  ): Promise<TicketBooking[]> {
    return this.service.ticketBookings(args);
  }

  @graphql.Query(() => TicketBooking, { nullable: true })
  async ticketBooking(
    @graphql.Args() args: TicketBookingFindUniqueArgs
  ): Promise<TicketBooking | null> {
    const result = await this.service.ticketBooking(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TicketBooking)
  async createTicketBooking(
    @graphql.Args() args: CreateTicketBookingArgs
  ): Promise<TicketBooking> {
    return await this.service.createTicketBooking({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => TicketBooking)
  async updateTicketBooking(
    @graphql.Args() args: UpdateTicketBookingArgs
  ): Promise<TicketBooking | null> {
    try {
      return await this.service.updateTicketBooking({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TicketBooking)
  async deleteTicketBooking(
    @graphql.Args() args: DeleteTicketBookingArgs
  ): Promise<TicketBooking | null> {
    try {
      return await this.service.deleteTicketBooking(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
